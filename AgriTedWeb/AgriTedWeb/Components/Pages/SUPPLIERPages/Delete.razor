@page "/suppliers/delete"
@using Microsoft.EntityFrameworkCore
@using DataAccess
@inject IDbContextFactory<AgriTedWeb.Data.AgriTedWebContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>SUPPLIER</h2>
    <hr />
    @if (supplier is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@supplier.Email</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CompanyName</dt>
            <dd class="col-sm-10">@supplier.CompanyName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">PhoneNumber</dt>
            <dd class="col-sm-10">@supplier.PhoneNumber</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ProductType</dt>
            <dd class="col-sm-10">@supplier.ProductType</dd>
        </dl>
        <EditForm method="post" Model="supplier" OnValidSubmit="DeleteSUPPLIER" FormName="delete" Enhance>
            <button type="submit" class="btn btn-outline-danger" disabled="@(supplier is null)">Delete</button> |
            <a href="/suppliers" class="btn btn-outline-secondary">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private SUPPLIER? supplier;

    [SupplyParameterFromQuery]
    private int SupplierId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        supplier = await context.SUPPLIER.FirstOrDefaultAsync(m => m.SupplierId == SupplierId);

        if (supplier is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteSUPPLIER()
    {
        using var context = DbFactory.CreateDbContext();
        context.SUPPLIER.Remove(supplier!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/suppliers");
    }
}
