@page "/fields/edit"
@using Microsoft.EntityFrameworkCore
@using DataAccess
@inject IDbContextFactory<AgriTedWeb.Data.AgriTedWebContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>FIELD</h2>
<hr />
@if (FIELD is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="FIELD" OnValidSubmit="UpdateFIELD" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="FIELD.FieldId" value="@FIELD.FieldId" />
                <div class="mb-3">
                    <label for="rentalfee" class="form-label">RentalFee:</label>
                    <InputNumber id="rentalfee" @bind-Value="FIELD.RentalFee" class="form-control" />
                    <ValidationMessage For="() => FIELD.RentalFee" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="FIELD.Name" class="form-control" />
                    <ValidationMessage For="() => FIELD.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="size" class="form-label">Size:</label>
                    <InputNumber id="size" @bind-Value="FIELD.Size" class="form-control" />
                    <ValidationMessage For="() => FIELD.Size" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-outline-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/fields" class="btn btn-outline-secondary">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int FieldId { get; set; }

    [SupplyParameterFromForm]
    private FIELD? FIELD { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        FIELD ??= await context.FIELD.FirstOrDefaultAsync(m => m.FieldId == FieldId);

        if (FIELD is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateFIELD()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(FIELD!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!FIELDExists(FIELD!.FieldId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/fields");
    }

    private bool FIELDExists(int fieldid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.FIELD.Any(e => e.FieldId == fieldid);
    }
}
