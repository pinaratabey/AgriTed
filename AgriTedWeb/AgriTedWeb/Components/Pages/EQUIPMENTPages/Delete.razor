@page "/equipments/delete"
@using Microsoft.EntityFrameworkCore
@using DataAccess
@inject IDbContextFactory<AgriTedWeb.Data.AgriTedWebContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>EQUIPMENT</h2>
    <hr />
    @if (equipment is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Type</dt>
            <dd class="col-sm-10">@equipment.Type</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Price</dt>
            <dd class="col-sm-10">@equipment.Price</dd>
        </dl>
        <EditForm method="post" Model="equipment" OnValidSubmit="DeleteEQUIPMENT" FormName="delete" Enhance>
            <button type="submit" class="btn btn-outline-danger" disabled="@(equipment is null)">Delete</button> |
            <a href="/equipments" class="btn btn-outline-secondary">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private EQUIPMENT? equipment;

    [SupplyParameterFromQuery]
    private int EquipmentId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        equipment = await context.EQUIPMENT.FirstOrDefaultAsync(m => m.EquipmentId == EquipmentId);

        if (equipment is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    

    private async Task DeleteEQUIPMENT()
    {
        using var context = DbFactory.CreateDbContext();

        // Equipment ile ilişkili tüm rezervasyonları yükleyip sil
        var reservations = context.RESERVATION.Where(r => r.EquipmentId == equipment!.EquipmentId);
        context.RESERVATION.RemoveRange(reservations);

        // Equipment'ı sil
        context.EQUIPMENT.Remove(equipment!);

        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/equipments");
    }
}