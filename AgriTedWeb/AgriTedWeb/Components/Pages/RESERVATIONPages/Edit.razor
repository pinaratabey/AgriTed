@page "/reservations/edit"
@using Microsoft.EntityFrameworkCore
@using DataAccess
@inject IDbContextFactory<AgriTedWeb.Data.AgriTedWebContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>RESERVATION</h2>
<hr />
@if (RESERVATION is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="RESERVATION" OnValidSubmit="UpdateRESERVATION" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" />
                <input type="hidden" name="RESERVATION.ReservationId" value="@RESERVATION.ReservationId" />

                <!-- Field Selection Dropdown -->
                <div class="mb-3">
                    <label for="fieldid" class="form-label">Field:</label>
                    <InputSelect id="fieldid" @bind-Value="RESERVATION.FieldId" class="form-select">
                        <option value="">-- Please select a field --</option>
                        @foreach (var field in Fields)
                        {
                            <option value="@field.FieldId">@field.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => RESERVATION.FieldId" class="text-danger" />
                </div>

                <!-- Farmer Selection Dropdown -->
                <div class="mb-3">
                    <label for="farmerid" class="form-label">Farmer:</label>
                    <InputSelect id="farmerid" @bind-Value="RESERVATION.FarmerId" class="form-select">
                        <option value="">-- Please select a farmer --</option>
                        @foreach (var farmer in Farmers)
                        {
                            <option value="@farmer.FarmerId">@farmer.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => RESERVATION.FarmerId" class="text-danger" />
                </div>

                <!-- Crop Selection Dropdown -->
                <div class="mb-3">
                    <label for="cropid" class="form-label">Crop:</label>
                    <InputSelect id="cropid" @bind-Value="RESERVATION.CropId" class="form-select">
                        <option value="">-- Please select a crop --</option>
                        @foreach (var crop in Crops)
                        {
                            <option value="@crop.CropId">@crop.Type</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => RESERVATION.CropId" class="text-danger" />
                </div>

                <!-- Equipment Selection Dropdown -->
                <div class="mb-3">
                    <label for="equipmentid" class="form-label">Equipment:</label>
                    <InputSelect id="equipmentid" @bind-Value="RESERVATION.EquipmentId" class="form-select">
                        <option value="">-- Please select equipment --</option>
                        @foreach (var equipment in EquipmentList)
                        {
                            <option value="@equipment.EquipmentId">@equipment.Type</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => RESERVATION.EquipmentId" class="text-danger" />
                </div>

                <!-- Fertilizer Selection Dropdown -->
                <div class="mb-3">
                    <label for="fertilizerid" class="form-label">Fertilizer:</label>
                    <InputSelect id="fertilizerid" @bind-Value="RESERVATION.FertilizerId" class="form-select">
                        <option value="">-- Please select a fertilizer --</option>
                        @foreach (var fertilizer in Fertilizers)
                        {
                            <option value="@fertilizer.FertilizerId">@fertilizer.Type</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => RESERVATION.FertilizerId" class="text-danger" />
                </div>

                <!-- Total Price -->
                <div class="mb-3">
                    <label for="totalprice" class="form-label">Total Price:</label>
                    <InputNumber id="totalprice" @bind-Value="RESERVATION.TotalPrice" class="form-control" />
                    <ValidationMessage For="() => RESERVATION.TotalPrice" class="text-danger" />
                </div>

                <!-- Start Date -->
                <div class="mb-3">
                    <label for="startdate" class="form-label">Start Date:</label>
                    <InputDate id="startdate" @bind-Value="RESERVATION.StartDate" class="form-control" />
                    <ValidationMessage For="() => RESERVATION.StartDate" class="text-danger" />
                </div>

                <!-- End Date -->
                <div class="mb-3">
                    <label for="enddate" class="form-label">End Date:</label>
                    <InputDate id="enddate" @bind-Value="RESERVATION.EndDate" class="form-control" />
                    <ValidationMessage For="() => RESERVATION.EndDate" class="text-danger" />
                </div>

                <!-- Status Field -->
                <div class="mb-3">
                    <label for="status" class="form-label">Status:</label>
                    <InputText id="status" @bind-Value="RESERVATION.Status" class="form-control" />
                    <ValidationMessage For="() => RESERVATION.Status" class="text-danger" />
                </div>

                <button type="submit" class="btn btn-outline-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/reservations" class="btn btn-outline-secondary">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int ReservationId { get; set; }

    [SupplyParameterFromForm]
    private RESERVATION? RESERVATION { get; set; }

    private List<FIELD> Fields { get; set; } = new();
    private List<FARMER> Farmers { get; set; } = new();
    private List<CROP> Crops { get; set; } = new();
    private List<EQUIPMENT> EquipmentList { get; set; } = new();
    private List<FERTILIZER> Fertilizers { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();

        // Load reservation data
        RESERVATION ??= await context.RESERVATION.FirstOrDefaultAsync(m => m.ReservationId == ReservationId);

        if (RESERVATION is null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        // Preload data for dropdowns
        Fields = await context.FIELD.ToListAsync();
        Farmers = await context.FARMER.ToListAsync();
        Crops = await context.CROP.ToListAsync();
        EquipmentList = await context.EQUIPMENT.ToListAsync();
        Fertilizers = await context.FERTILIZER.ToListAsync();
    }

    private async Task UpdateRESERVATION()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(RESERVATION!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!RESERVATIONExists(RESERVATION!.ReservationId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/reservations");
    }

    private bool RESERVATIONExists(int reservationId)
    {
        using var context = DbFactory.CreateDbContext();
        return context.RESERVATION.Any(e => e.ReservationId == reservationId);
    }
}
