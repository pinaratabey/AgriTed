@page "/qualities/details"
@using Microsoft.EntityFrameworkCore
@using DataAccess
@inject IDbContextFactory<AgriTedWeb.Data.AgriTedWebContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>QUALITY</h2>
    <hr />
    @if (quality is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">FertilizerId</dt>
            <dd class="col-sm-10">@quality.FertilizerId</dd>
            <dt class="col-sm-2">QualityDescription</dt>
            <dd class="col-sm-10">@quality.QualityDescription</dd>
        </dl>
        <div>
            <a href="@($"/qualities/edit?qualityid={quality.QualityId}")" class="btn btn-outline-warning">Edit</a> |
            <a href="@($"/qualities")" class="btn btn-outline-secondary">Back to List</a>
        </div>
    }
</div>

@code {
    private QUALITY? quality;

    [SupplyParameterFromQuery]
    private int QualityId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        quality = await context.QUALITY.FirstOrDefaultAsync(m => m.QualityId == QualityId);

        if (quality is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
